<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 自动扫描包 -->
    <context:component-scan base-package="com.liukai.mvc.dao,com.liukai.mvc.controller,com.liukai.mvc.interceptors"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
     所有的请求必须先经过前端控制器 dispatcher 进行渲染，然后再到控制器
     如果控制器中没有相关请求路径，该配置就会起作用
     也就是说 dispatcher处理不了的请求，就会跑到默认的serlvet-handler（default-servlet-handler）中处理
   处理静态资源，例如html、js、css、jpg
  若只设置该标签，则只能访问静态资源，其他请求则无法访问
  此时必须设置<mvc:annotation-driven/>解决问题
 -->
    <mvc:default-servlet-handler/>

    <!-- 开启mvc注解驱动
    如果不开启，则 <mvc:view-controller path="/" view-name="index"></mvc:view-controller> 配置好后
    所有控制器中的跳转全部失效
    -->
    <mvc:annotation-driven/>


    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

    <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->
    <mvc:interceptors>
<!--        <bean class="com.liukai.mvc.interceptors.FirstInterceptor"/>-->
        <!--
            以上配置方式可以通过ref或bean标签设置拦截器，
            通过mvc:mapping设置需要拦截的请求，
            通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
        -->
<!--        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/"/>&lt;!&ndash;排除掉首页&ndash;&gt;
            <ref bean="firstInterceptor"/>
        </mvc:interceptor>-->

        <ref bean="firstInterceptor"/>
        <ref bean="secondInterceptor"/>

    </mvc:interceptors>


    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/test_rest" view-name="test_rest"/>
    <mvc:view-controller path="/toAdd" view-name="employee_add"/>
    <mvc:view-controller path="/test_http" view-name="http_message_converter"/>
    <mvc:view-controller path="/test_ajax" view-name="test_ajax"/>
    <mvc:view-controller path="/test_file" view-name="file"/>
    <mvc:view-controller path="/test_interceptor" view-name="test_interceptor"/>
    <mvc:view-controller path="/test_error" view-name="test_error"/>




<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                &lt;!&ndash;
                    properties的键表示处理器方法执行过程中出现的异常
                    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
                &ndash;&gt;
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        &lt;!&ndash;
            exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享
        &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
    </bean>-->
</beans>